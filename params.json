{"name":"Annotations","tagline":"A lightweight PHP annotation library.","body":"Minime \\ Annotations\r\n==================\r\n\r\n[![Build Status](https://travis-ci.org/marcioAlmada/annotations.png?branch=master)](https://travis-ci.org/marcioAlmada/annotations)\r\n[![Coverage Status](https://coveralls.io/repos/marcioAlmada/annotations/badge.png?branch=master)](https://coveralls.io/r/marcioAlmada/annotations?branch=master)\r\n[![Scrutinizer Quality Score](https://scrutinizer-ci.com/g/marcioAlmada/annotations/badges/quality-score.png?s=dba04c50549638ca00a6f22ff35903066f351909)](https://scrutinizer-ci.com/g/marcioAlmada/annotations/)\r\n[![Latest Stable Version](https://poser.pugx.org/minime/annotations/v/stable.png)](https://packagist.org/packages/minime/annotations)\r\n[![Total Downloads](https://poser.pugx.org/minime/annotations/downloads.png)](https://packagist.org/packages/minime/annotations)\r\n\r\nMinime\\Annotations is a very simple PHP library that lets you create APIs\r\nthat react to metadata with great flexibility and no headache.\r\n\r\n## Features & Roadmap\r\n\r\n- ~~[DONE]~~ Class, property and method annotations\r\n- ~~[DONE]~~ Namespaced annotations\r\n- ~~[DONE]~~ API to filter and traverse annotations\r\n- ~~[DONE]~~ Traits (for convenient integration)\r\n- Parser\r\n    - ~~[DONE]~~ <b>Optional</b> strong typed annotations: float, integer, string, json\r\n    - ~~[DONE]~~ Dynamic annotations (eval type)\r\n    - ~~[DONE]~~ Implicit boolean annotations\r\n    - ~~[DONE]~~ Multiple value annotations\r\n    - ~~[DONE]~~ Inline Docblock support (see [#15](https://github.com/marcioAlmada/annotations/issues/15))\r\n    - [TODO] Multiline annotations value (see [#16](https://github.com/marcioAlmada/annotations/issues/16))\r\n    - [TODO] Parser improvements and optimizations (see [#17](https://github.com/marcioAlmada/annotations/issues/17))\r\n\r\n## Installation\r\n\r\nManually update `composer.json` with:\r\n```json\r\n{\r\n  \"require\": {\r\n    \"minime/annotations\": \"~1.1\"\r\n  }\r\n}\r\n```\r\n\r\nOr just use your terminal: `composer require minime/annotations:~1.1` :8ball:\r\n\r\n\r\n## Basic Usage\r\n\r\n### Using as a trait\r\n\r\nThe trait approach is useful for self / internal reflection:\r\n\r\n```php\r\n/**\r\n * @get @post @delete\r\n * @entity bar\r\n * @has-many Baz\r\n * @accept json [\"json\", \"xml\", \"csv\"]\r\n * @max integer 45\r\n * @delta float .45\r\n * @cache-duration eval 1000 * 24 * 60 * 60\r\n */\r\nclass FooController\r\n{\r\n    use Minime\\Annotations\\Traits\\Reader;\r\n}\r\n\r\n$foo = new Foo();\r\n$annotations = $foo->getClassAnnotations();\r\n\r\n$annotations->get('get')      // > bool(true)\r\n$annotations->get('post')     // > bool(true)\r\n$annotations->get('delete')   // > bool(true)\r\n\r\n$annotations->get('entity')   // > string(3) \"bar\"\r\n$annotations->get('has-many') // > string(3) \"Baz\"\r\n\r\n$annotations->get('accept')   // > array(3){ [0] => \"json\" [1] => \"xml\" [2] => \"csv\" }\r\n$annotations->get('max')      // > int(45)\r\n$annotations->get('delta')    // > double(0.45)\r\n$annotations->get('cache-duration')    // > int(86400000)\r\n\r\n$annotations->get('undefined')  // > null\r\n```\r\n\r\nGetting annotations from property and methods is easy too:\r\n\r\n```php\r\n$foo->getPropertyAnnotations('property_name');\r\n$foo->getMethodAnnotations('method_name');\r\n```\r\n\r\n### Using the facade\r\n\r\nThe facade is useful when you want to inspect classes out of your logic domain:\r\n\r\n```php\r\nuse Minime\\Annotations\\Facade;\r\n\r\nFacade::getClassAnnotations('Full\\Class\\Name');\r\nFacade::getPropertyAnnotations('Full\\Class\\Name', 'property_name');\r\nFacade::getMethodAnnotations('Full\\Class\\Name', 'method_name');\r\n```\r\n\r\n### Grepping and traversing\r\n\r\nLet's suppose you want to pick just a group of annotations:\r\n\r\n```php\r\n/**\r\n * @response.xml\r\n * @response.xls\r\n * @response.json\r\n * @response.csv\r\n * @method.get\r\n * @method.post\r\n */\r\nclass WebService\r\n{\r\n    use Minime\\Annotations\\Traits\\Reader;\r\n}\r\n\r\n$annotations = (new WebService())->getClassAnnotations();\r\n```\r\n\r\n#### Retrieving all annotations within 'response' namespace\r\n\r\n```php\r\n$annotations->useNamespace('response')->export();\r\n// > array(3){\r\n// >    [\"xml\"]  => (bool) TRUE,\r\n// >    [\"xls\"]  => (bool) TRUE,\r\n// >    [\"json\"] => (bool) TRUE,\r\n// >    [\"csv\"]  => (bool) TRUE\r\n// > }\r\n```\r\n\r\n#### Chainning with grep to get all annotations beginning with 'x' within 'response' namespace:\r\n\r\n```php\r\n$annotations->useNamespace('response')->grep('^x')->export();\r\n// > array(3){\r\n// >    [\"xml\"]  => (bool) TRUE,\r\n// >    [\"xls\"]  => (bool) TRUE\r\n// > }\r\n```\r\n\r\n#### Traversing results\r\n\r\n```php\r\nforeach($annotations->useNamespace('method') as $annotation => $value)\r\n{\r\n    // some behavior\r\n}\r\n```\r\n\r\n## Want to contribute?\r\n\r\nFound a bug? Have an improvement? Take a look at the [issues](https://github.com/marcioAlmada/annotations/issues), there is always something to be done. Please, send pull requests to develop branch only.\r\n\r\n### Steps\r\n \r\n0. Fork [minime\\annotations](https://github.com/marcioAlmada/annotations/fork)\r\n0. Clone forked repository\r\n0. Install composer dependencies `$ composer install --prefer-dist`\r\n0. Run unit tests `$ phpunit`\r\n0. Modify code: correct bug, implement features\r\n0. Back to step 4\r\n\r\n> PLEASE, be objective with pull requests. Avoid combos of improvements + doc + solve bugs + features within the same pull request.\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2013 MÃ¡rcio Almada. Distributed under the terms of an MIT-style license. See LICENSE for details.\r\n\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/marcioAlmada/annotations/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}